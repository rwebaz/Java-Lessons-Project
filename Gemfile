# 
# Gemfile ver 011921 Satellite Repo
# 
# frozen_string_literal: true
#
source "https://rubygems.org"
#
ruby "2.7.2"
#
git_source(:github) {|repo_name| "https://github.com/#{repo_name}" }
#
# gem "rails"
#
# Hello!
#
# This is where you manage which version of the 'Jekyll server' is used to run your GitHub Pages repo.
#
# The 'Gemfile' (no extension suffix) sits in the root directory of your repo.
#
# This 'Gemfile' is where you manage the versioning for the 'Jekyll server' and all of its dependencies.
#
# At the beginning, when you establish GitHub Pages via the 'docs' folder in the settings page of your new repo over at GitHub ...
# 
# A new 'Gemfile' will be auto-populated remotely with a simply one-line showing your selected theme.
#
# Note. To select a theme, make sure you have a copy of an index.md page sitting inside the 'docs' folder at your remote master.
#
# After successfully synching your local master with the remote master, you will need to enhance the beginning 'Gemfile'.
#
# Import the contents of this template into your new 'Gemfile' and synch again with the remote master.
#
# When you run the command 'bundle install' from a local Terminal prompt at the root directory of your repo ...
# 
# A 'Gemfile.lock' file will be auto-generated by the 'Gem Bundler' program that fixes the dependencies shown here.
#
# Note. You will need to install a copy of the 'Gem Bundler' program onto your development machine
#
# From the global Terminal prompt, run the following command statement:
#
# Note. The current version of `Bundler` is: 2.2.2
#
# However, the working version for most of the repos here is: 1.16.1
#
# gem install bundler
#
# Note. You only need to install the 'Gem Bundler' program once.
#
# Once you have successfully installed the 'Gem Bundler' program to your development machine ...
#
# You may then run the following command from a Terminal prompt to check the current version of 'Gem Bundler', as follows:
# 
# bundler --version
#
# You may also run the following command from a Terminal prompt to check the location of your new 'Gem Bundler' version, as follows:
#
# which bundler
#
# The 'Gem Bundler' program will notify you via the Terminal at the next update operation ...
# if an upgrade to your version of the 'Gem Bundler' program is available.
# 
# To upgrade your version of the 'Gem Bundler' program ...
# 
# Type the following command at a local Terminal prompt,
#
# or,
# 
# gem update bundler: 2.2.2
#
# or,
#
# gem install bundler:1.16.1
#
# or,
#
# # bundle update --bundler
#
# It is not necessary to install the 'Gem Bundler' program every time you create a separate repo. 
#
# To instantiate an instance of the 'Jekyll server' on your development machine ...
#
# Note. You will need to install the `rnew` "Ruby Version Manager" onto your development machine, as follows:
#
# How to upgrade your machine's copy of Ruby w Home `brew` and `rbenv`
# 
# From a local Terminal window, enter the following set of commands ...
#
# $ brew update; where `$` is the Terminal prompt and the statement terminating `semi-colon` (;) is not required
# $ brew upgrade ruby-build; where `$` is the Terminal prompt and the statement terminating `semi-colon` (;) is not required
# $ rbenv install 2.7.2; where `$` is the Terminal prompt and the statement terminating `semi-colon` (;) is not required
# $ rbenv global 2.7.2; where `$` is the Terminal prompt and the statement terminating `semi-colon` (;) is not required
# $ ruby -v; where `$` is the Terminal prompt and the statement terminating `semi-colon` (;) is not required
#
# Note. You may also `fresh install` a copy of 'Ruby ver 2.7.2' with the help of your new 'Ruby Version Manager' working through Homebrew.
# 
# Once you have successfully installed (or, upgraded) 'Ruby ver 2.7.2' to your development machine ...
#
# You may now install the local 'Jekyll server' program via the following global Terminal command ...
#
# gem install jekyll
#
# Note. Designating the version of the 'Jekyll server' when installing via Bundle update, or via the initial Bundle install ...
# 
# Will not survive the 'Jekyll-docs' installation
#
# Once the 'Jekyll server' program has been installed to your development machine ...
#
# Note. If you are planning to use 'GitHub Pages' ...
# 
# Then, comment out the following version statement to retain your superior version copy locally
#
gem 'jekyll', '3.9.0'
#
# Note. The version of 'Jekyll docs' should match the installed version of 'Jekyll' from above.
# In other words, you should install the 'jekyll-docs' gem version = 3.6.2 to use the 'jekyll docs' command
#
# However, when attempting ...
# gem install jekyll-docs v3.6.2
# From the global Terminal command, returns ...
# Warning. Could not find a valid gem 'v3.6.2' (>= 0) in any repository
#
# After successfully installing the 'Jekyll server' program from the global Terminal prompt, as above ...
#
# You may also install the 'jekyll-docs' program from the global Terminal prompt of your development machine, as follows:
#
# gem install jekyll-docs
#
# Once the 'Jekyll docs' program has been installed to your development machine ...
#
# Then, comment out the following version statement to retain your superior version copy locally
#
gem 'jekyll-docs', '3.9.0'
#
# To run 'Jekyll docs' locally ...
#
# Type the following command statement from the global Terminal prompt ...
#
# When you are ready to review the documentation.
#
# A new 'Jekyll server' instance will auto-launch in your Chrome browser window at the default port 4000, as follows:
#
# jekyll docs serve
#
# Congratulations! You have installed manually the most recent version of Jekyll docs ( ver 3.7.2 )
#
# And,
#
# Congratulations! You have installed manually the most recent version of Jekyll server ( ver 3.7.2 )
#
# Note. You only need to install the 'Jekyll server' program one time on your development machine.
#
# It is not necessary to install the 'Jekyll server' program every time you create a separate repo. 
#
# To check the disk location of your new 'Jekyll server' program, run the following command from a local Terminal prompt:
#
# which jekyll
#
# To check the version of your newly installed 'Jekyll server' program ...
# 
# Run the following command from a local Terminal prompt:
#
# jekyll -v
#
# When you want to use a different version of the 'Jekyll server' ...
#
# Run the following command from a Terminal prompt
#
# bundle update github-pages
#
# The 'Gem Bundler' program will then install the 'Jekyll server' version you have indicated.
#
# Optionally, you may run the following command from the Terminal prompt to ensure your copy of the 'Jekyll server' is up and running.
#
# bundle exec jekyll serve
#
# To start a local 'Jekyll server' instance ...
#
# Open up the /docs directory of your repo from inside Visual Studio Code.
#
# Next, type the following command at the 'Integrated Terminal View' of Visual Studio Code:
#
# jekyll serve --watch --baseurl "" -o
#
# The Jekyll server will auto-navigate to the default local URL http://localhost:4000/ at your Chrome browser and display your new repo locally.
#
# To manually target the 'Jekyll server' locally at another port other than the default port 4000 ...
#
# Type the following variation of the command at your Terminal prompt:
#
# jekyll serve --watch --baseurl "" --port 4001 -o
#
# Other switches can be added to trace a cache and the `bundle exec` prefix can be added to the `jekyll serve` command as above, as follows:
#
# bundle exec jekyll serve --watch --trace --baseurl "" --port 4003 -o
#
# The final `-o` switch in the above Terminal command auto opens the browser
#
# The default theme for new Jekyll sites is 'jekyll-theme-minimal 0.1.1'.
#
# Note. You may change the theme to anything you like via the config dot yaml page located in the `docs` folder of your new repo.
#
# If you do decide to manage the theme of your repo from the config dot yaml page, then comment out both the default and your selected themes here, as follows:
#
# gem 'jekyll-theme-minimal', 0.1.0'
# 
# Happy Jekyll-ing!
#
# Note. To upgrade all, run `bundle update` from the command line.
#
# github-pages, 200 requires rubyzip
gem 'rubyzip', '2.0.0'
#
# github-pages, 175 requires activesupport, 429
gem 'activesupport', '6.0.3.1'
#
gem 'github-pages-health-check', '1.16.1'
#
gem 'github-pages', '209'
#
# Note. The `github-markdown` dependency is no longer
# designated at the online GitHub Pages dependency chart
# C=> https://pages.github.com/versions/
# gem 'github-markdown'
#
gem 'html-pipeline', '2.14.0'
#
gem 'jekyll-avatar', '0.7.0'
#
gem 'jekyll-coffeescript', '1.1.1'
#
gem 'jekyll-commonmark-ghpages', '0.1.6'
#
gem 'jekyll-default-layout', '0.1.4'
#
gem 'jekyll-feed', '0.15.1'
#
gem 'jekyll-gist', '1.5.0'
#
gem 'jekyll-github-metadata', '2.13.0'
#
gem 'jekyll-mentions', '1.6.0'
#
gem 'jekyll-optional-front-matter', '0.3.2'
#
gem 'jekyll-paginate', '1.1.0'
#
gem 'jekyll-readme-index', '0.3.0'
#
gem 'jekyll-redirect-from', '0.16.0'
#
gem 'jekyll-relative-links', '0.6.1'
#
gem 'jekyll-remote-theme', '0.4.2'
#
gem 'jekyll-sass-converter', '1.5.2'
#
gem 'jekyll-seo-tag', '2.6.1'
#
gem 'jekyll-sitemap', '1.4.0'
#
gem 'jekyll-swiss', '1.0.0'
#
# Uncomment for all satellite repos
gem 'jekyll-theme-cayman', '0.1.1'
#
gem 'jekyll-titles-from-headings', '0.5.3'
#
gem 'jemoji', '0.12.0'
#
gem 'kramdown-parser-gfm', '1.1.0'
#
gem 'kramdown', '2.3.0'
#
gem 'liquid', '4.0.3'
#
gem 'minima', '2.5.1'
#
gem 'nokogiri', '1.11.4'
#
gem 'rouge', '3.23.0'
#
gem 'safe_yaml', '1.0.5'
#
gem 'sass', '3.7.4'
#
# The following gems are not listed at: https://pages.github.com/versions/
#
# gem 'rubyzip', '2.0.0'
gem 'listen', '3.1.5'
#
# If you have any other Jekyll plugins, put them here ...
# group: 'jekyll_plugins' do
# end
#
# Note. Windows does not include zoneinfo files, so bundle the tzinfo-data gem
# gem 'tzinfo-data', platforms: [:mingw, :mswin, :x64_mingw, :jruby]
# 